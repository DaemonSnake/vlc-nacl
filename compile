#!/bin/sh

SRC_DIR=$(dirname `readlink -f $0`)
BUILD_DIR=$(readlink -f `pwd`)

if [ "${SRC_DIR}" = "${BUILD_DIR}" ]; then
    BUILD_DIR=${BUILD_DIR}/build
fi

#############
# FUNCTIONS #
#############

msg() {
    echo "compile: $*"
}

step_msg() {
    msg
    msg "$1"
    msg
}

copy_if_changed() {
    if cmp -s $1 $2
    then
        msg "leaving $2 unchanged"
    else
        cp -f $1 $2
        chmod u-w $2 # make copied artifact read-only
    fi
}

move_if_changed() {
    if cmp -s $1 $2
    then
        msg "leaving $2 unchanged"
    else
        mv -f $1 $2
        chmod u-w $2 # make moved artifact read-only
    fi
}

make_dir() {
    if [ ! -d $1 ]
    then
        mkdir -p $1
    fi
}

showvar() {
    local T
    eval T=\$$1
    printf "compile: %-26s := %s %s\n" $1 "$T" "$2"
}

putvar() {
    local T
    eval T=\$$1
    printf "compile: %-26s := %s %s\n" $1 "$T" "$2"
    printf "export %s=%s\n" $1 "$T" >> ${BUILD_DIR}/config.tmp
}

putstrvar() {
    local T
    eval T=\$$1
    printf "compile: %-26s := %s %s\n" $1 "$T" "$2"
    printf "export %s=\"%s\"\n" $1 "$T" >> ${BUILD_DIR}/config.tmp
}

checkfail()
{
    if [ ! $? -eq 0 ];then
        msg "$1"
        exit 1
    fi
}

showvar SRC_DIR
showvar BUILD_DIR

make_dir $BUILD_DIR

#############
# ARGUMENTS #
#############

ARCH="le32"
RELEASE=0
VERBOSE_MAKE=0

CLEAN=0
SET_MAKEFILE_O=0

# load the config file:
if [ -f ${BUILD_DIR}/config.sh ]; then
    . ${BUILD_DIR}/config.sh
fi

while [ $# -gt 0 ]; do
    case $1 in
        help|--help)
            echo "Use --arch to set the ARCH: `le32` (default), `x86_64`, `i686`, or `arm`."
            echo "Use --release to build in release mode"
            echo 'Use --pepper-root to override $NACL_SDK_ROOT.'
            echo 'Use --webports-root to override $WEBPORTS_ROOT.'
            exit 1
            ;;
        a|-a|--arch)
            ARCH=$2
            shift
            ;;
        --pepper-root)
            NACL_SDK_ROOT=$2
            export NACL_SDK_ROOT=$NACL_SDK_ROOT
            shift
            ;;
        --webports-root)
            WEBPORTS_ROOT=$2
            export WEBPORTS_ROOT=$WEBPORTS_ROOT
            shift
            ;;
        --release)
            if [ $RELEASE -eq 0 ]; then
                CLEAN=1
                SET_MAKEFILE_O=1
            fi
            RELEASE=1
            ;;
        --debug)
            if [ $RELEASE -eq 1 ]; then
                CLEAN=1
                SET_MAKEFILE_O=1
            fi
            RELEASE=0
            ;;
        --verbose-make)
            VERBOSE_MAKE=1
            ;;
    esac
    shift
done

if [ -z "$NACL_SDK_ROOT" ]; then
    echo "Please provide --pepper-root or set the NACL_SDK_ROOT environment variable to its path."
    exit 1
fi
if [ -z "$WEBPORTS_ROOT" ]; then
    echo "Please provide --webports-root set the WEBPORTS_ROOT environment variable to its path."
    exit 1
fi

if which remake > /dev/null;
then
    MAKE=remake
else
    MAKE=make
fi

putstrvar NACL_SDK_ROOT
putstrvar WEBPORTS_ROOT
putvar ARCH
putvar RELEASE
putvar MAKE
putvar VERBOSE_MAKE

# CONFIGURE DONE

make_dir ${BUILD_DIR}
if [ -f ${BUILD_DIR}/config.sh ]; then
    # We need to override the `Makefile`s in the build dir to use -O0 instead of -O2 for debugging.
    SET_MAKEFILE_O=1
fi
move_if_changed ${BUILD_DIR}/config.tmp ${BUILD_DIR}/config.sh
rm -f ${BUILD_DIR}/config.tmp

step_msg "configure done"

###########################
# VLC CONFIGURE ARGUMENTS #
###########################

VLC_CONFIGURE_ARGS="--disable-shared --enable-static --disable-vlc --disable-a52 --enable-gles2 --disable-xcb --disable-xvideo --disable-libgcrypt --disable-lua --disable-vlm --disable-sout --disable-addonmanagermodules --disable-httpd --disable-alsa --disable-pulse --disable-svg --disable-svgdec --disable-ncurses --disable-shout --disable-gnutls --disable-screen --disable-dbus --disable-udev --disable-upnp --disable-goom --disable-projectm --disable-mtp --disable-vsxu -disable-qt --disable-skins2 --disable-vdpau --disable-vda --without-contrib --disable-aribsub --disable-optimizations --disable-avcodec --disable-swscale"

########################
# VLC MODULE BLACKLIST #
########################

VLC_MODULE_BLACKLIST="syslog
"

#########
# FLAGS #
#########

TARGET_TRIPLE="${ARCH}-unknown-nacl"

OS=`$NACL_SDK_ROOT/tools/getos.py`
# We always use the PNaCl/Clang toolchain (which can also target NaCl).
SYSROOT=$NACL_SDK_ROOT/toolchain/${OS}_pnacl/

case $ARCH in
    le32)
        CONFIG_ARGS="-t pnacl"
        PNACL=1

        BC_SYSROOT=$SYSROOT/le32-nacl
        ;;
    x86_64|i686|arm)
        CONFIG_ARGS="-t clang-newlib -a ${ARCH}"
        BC_SYSROOT=$SYSROOT/${ARCH}_bc-nacl
        ;;
    *)
        echo "Unknown ARCH: '${ARCH}'. Die, die, die!"
        exit 1
    ;;
esac

WEBPORTS_SYSROOT=$SYSROOT/$ARCH-nacl

export PATH=${SYSROOT}/bin:$PATH

# Make in //
if [ -z "$MAKEFLAGS" ]; then
    UNAMES=$(uname -s)
    MAKEFLAGS=
    if which nproc >/dev/null; then
        MAKEFLAGS=-j`nproc`
    elif [ "$UNAMES" == "Darwin" ] && which sysctl >/dev/null; then
        MAKEFLAGS=-j`sysctl -n machdep.cpu.thread_count`
    fi
fi

##########
# CFLAGS #
##########
if [ $RELEASE -eq 0 ];
then
     CFLAGS="-g -O0"
else
     CFLAGS="-g -O2"
fi

CFLAGS="${CFLAGS} -fstrict-aliasing -funsafe-math-optimizations"

if [ "$PNACL" = "1" ]; then
    # matroska uses exceptions:
    CFLAGS="${CFLAGS} --pnacl-exceptions=sjlj"

    CFLAGS="${CFLAGS} -ffp-contract=off"
fi

CFLAGS="${CFLAGS} $(${NACL_SDK_ROOT}/tools/nacl_config.py ${CONFIG_ARGS} --cflags)"
CFLAGS="${CFLAGS} -I${WEBPORTS_SYSROOT}/usr/include -I${WEBPORTS_SYSROOT}/usr/include/glibc-compat"

case $ARCH in
    le32)
        CFLAGS="${CFLAGS}"
        ;;
    x86_64|i686|arm)

        ;;
esac

EXTRA_CFLAGS="-std=gnu11 -lc++ -lpthread"
EXTRA_CXXFLAGS="-std=gnu++11"

#################
# Setup LDFLAGS #
#################

case $ARCH in
    le32)
        EXTRA_LDFLAGS="-L$NACL_SDK_ROOT/lib/pnacl/Release"
        ;;
esac

# Release or not?
if [ "$RELEASE" = 1 ]; then
    OPTS=""
    EXTRA_CFLAGS="${EXTRA_CFLAGS} -DNDEBUG "
else
    OPTS="--enable-debug"
fi


showvar CFLAGS
showvar EXTRA_CFLAGS
showvar CXXFLAGS
showvar EXTRA_CXXFLAGS
showvar LDFLAGS

###########################
# Build buildsystem tools #
###########################

step_msg "Building webports (this may take awhile)"
cd $WEBPORTS_ROOT
./bin/webports ${CONFIG_FLAGS} install libtheora libvorbis zlib ffmpeg libogg flac libpng x264 lame freetype fontconfig libxml2 libarchive mpg123 libmodplug faad2 libebml libmatroska
checkfail "build && install prerequisites"


#############
# BOOTSTRAP #
#############

VLC_SRC_DIR=$SRC_DIR/vlc
VLC_BUILD_DIR=${BUILD_DIR}/vlc-${TARGET_TRIPLE}

if [ $CLEAN -ne 0 ]; then
    rm -fr $VLC_BUILD_DIR
    rm -fr $BUILD_DIR/obj
fi

make_dir $VLC_BUILD_DIR

if [ ! -f $VLC_SRC_DIR/configure ]; then
    step_msg "Bootstraping"
    cd $VLC_SRC_DIR
    ./bootstrap
    checkfail "vlc: bootstrap failed"
fi

# GLES 2 pc file:
cp ${SRC_DIR}/extras/glesv2.pc ${WEBPORTS_SYSROOT}/usr/lib/pkgconfig

#################
# CONFIGURE VLC #
#################

cd $VLC_BUILD_DIR

export CC="$($NACL_SDK_ROOT/tools/nacl_config.py ${CONFIG_ARGS} --tool cc)"
export CXX="$($NACL_SDK_ROOT/tools/nacl_config.py ${CONFIG_ARGS} --tool c++)"
export NM="$($NACL_SDK_ROOT/tools/nacl_config.py ${CONFIG_ARGS} --tool nm)"
export STRIP="$($NACL_SDK_ROOT/tools/nacl_config.py ${CONFIG_ARGS} --tool strip)"
export RANLIB="$($NACL_SDK_ROOT/tools/nacl_config.py ${CONFIG_ARGS} --tool ranlib)"
export AR="$($NACL_SDK_ROOT/tools/nacl_config.py ${CONFIG_ARGS} --tool ar)"
export PKG_CONFIG_LIBDIR="${WEBPORTS_SYSROOT}/usr/lib/pkgconfig"

if [ ! -e ./config.h ]; then
    step_msg "Configuring VLC..."

    CPPFLAGS="$CFLAGS" \
            CFLAGS="$CFLAGS ${EXTRA_CFLAGS}" \
            CXXFLAGS="$CFLAGS ${EXTRA_CXXFLAGS}" \
            LDFLAGS="$LDFLAGS ${EXTRA_LDFLAGS}" \
            sh $VLC_SRC_DIR/configure --host=$TARGET_TRIPLE --target=$TARGET_TRIPLE \
            ${EXTRA_PARAMS} ${VLC_CONFIGURE_ARGS} ${OPTS}
    checkfail "vlc: configure failed"

    SET_MAKEFILE_O = 1
fi

############
# BUILDING #
############

if [ $SET_MAKEFILE_O -ne 0 ]; then
    if [ $RELEASE -eq 0 ]; then
        OPT_LEVEL="\-O0"
    else
        OPT_LEVEL="\-O2"
    fi

    for i in `find $BUILD_DIR -name Makefile`; do sed -i "s/\-O[0-3sz]/${OPT_LEVEL}/g" $i; done
fi

step_msg "Building VLC"
$MAKE $MAKEFLAGS V=$VERBOSE_MAKE
checkfail "vlc: make failed"

cd $SRC_DIR

##################
# libVLC modules #
##################

msg "Generating static module list"
blacklist_regexp=
for i in ${VLC_MODULE_BLACKLIST}
do
    if [ -z "${blacklist_regexp}" ]
    then
        blacklist_regexp="${i}"
    else
        blacklist_regexp="${blacklist_regexp}|${i}"
    fi
done

find_modules()
{
    echo "`find $1 -name 'lib*plugin.a' | grep -vE "lib(${blacklist_regexp})_plugin.a" | tr '\n' ' '`"
}

VLC_MODULES=$(find_modules $VLC_BUILD_DIR/modules)
for file in $VLC_MODULES; do
    libname=`echo $file | sed 's/.*\.libs\/lib\(.*\)\.a/\1/'`
    name=`echo $file | sed 's/.*\.libs\/lib//' | sed 's/_plugin\.a//'`
    BUILTINS="$BUILTINS\nPLUGIN_INIT_SYMBOL(vlc_entry__$name)"
    LIBS="${LIBS} -l${libname}"
done;
printf "/* Autogenerated from the list of modules */\n$BUILTINS\n" > ${BUILD_DIR}/vlc_static_modules_init.h

step_msg "Building self"

if [ $CLEAN -ne 0 ]; then
    rm $BUILD_DIR/vlc.*
fi

CFLAGS="${CFLAGS} -I${SRC_DIR}/vlc/include -I${SRC_DIR}/include -I${VLC_BUILD_DIR} -I${BUILD_DIR}"
LDFLAGS="$LDFLAGS ${EXTRA_LDFLAGS} -L${VLC_BUILD_DIR}/compat/.libs/ -L${VLC_BUILD_DIR}/lib/.libs/ -L${VLC_BUILD_DIR}/modules/.libs/ -L${VLC_BUILD_DIR}/src/.libs/ -L${WEBPORTS_SYSROOT}/usr/lib ${LIBS}"

CPPFLAGS="$CFLAGS" \
            CFLAGS="$CFLAGS ${EXTRA_CFLAGS}" \
            CXXFLAGS="$CFLAGS ${EXTRA_CXXFLAGS}" \
            LDFLAGS="$LDFLAGS" \
            \
            $MAKE $MAKEFLAGS V=$VERBOSE_MAKE IN_COMPILE_SH=1 BUILD_DIR="${BUILD_DIR}" PNACL="${PNACL}" \
            OPT="${SYSROOT}/bin/pnacl-opt" TRANS="${SYSROOT}/bin/pnacl-translate" \
            FREEZE="${SYSROOT}/bin/pnacl-freeze" BCCOMPRESS="${SYSROOT}/bin/pnacl-bccompress"\
            MACHINE=`uname -m` RELEASE=$RELEASE
checkfail "make failed"

step_msg "Done! :)"
