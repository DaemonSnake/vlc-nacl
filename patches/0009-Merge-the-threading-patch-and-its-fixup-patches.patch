From b02cea5d755328d208f08a190430e6be4fa25266 Mon Sep 17 00:00:00 2001
From: Bastien Penavayre <bastienPenava@gmail.com>
Date: Fri, 24 Jun 2016 15:19:25 +0200
Subject: [PATCH] Merge the threading patch and its fixup patches

This commit merges the main pnacl thread commit with the ones
correcting it.
patch merged:
 -0009-Threading-for-Nacl-note-untest.patch
 -0014-NaCl-threading-corrections.patch
 -0020-NaCl-Fix-vlc_thread_fatal.patch
---
 include/vlc_threads.h |  96 +++++++++++++++++++++++++++++++
 src/Makefile.am       |  24 ++++++++
 src/nacl/cancel.c     | 102 +++++++++++++++++++++++++++++++++
 src/nacl/cond.c       | 137 ++++++++++++++++++++++++++++++++++++++++++++
 src/nacl/mutex.c      |  88 ++++++++++++++++++++++++++++
 src/nacl/rwlock.c     |  54 ++++++++++++++++++
 src/nacl/sem.c        |  72 +++++++++++++++++++++++
 src/nacl/thread.c     | 155 ++++++++++++++++++++++++++++++++++++++++++++++++++
 src/nacl/thread.h     | 100 ++++++++++++++++++++++++++++++++
 src/nacl/threadvar.c  |  45 +++++++++++++++
 src/nacl/time.c       |  91 +++++++++++++++++++++++++++++
 11 files changed, 964 insertions(+)
 create mode 100644 src/nacl/cancel.c
 create mode 100644 src/nacl/cond.c
 create mode 100644 src/nacl/mutex.c
 create mode 100644 src/nacl/rwlock.c
 create mode 100644 src/nacl/sem.c
 create mode 100644 src/nacl/thread.c
 create mode 100644 src/nacl/thread.h
 create mode 100644 src/nacl/threadvar.c
 create mode 100644 src/nacl/time.c

diff --git a/include/vlc_threads.h b/include/vlc_threads.h
index b31c885..02e0e9f 100644
--- a/include/vlc_threads.h
+++ b/include/vlc_threads.h
@@ -246,6 +246,102 @@ typedef struct vlc_timer *vlc_timer_t;
 # define VLC_THREAD_PRIORITY_OUTPUT  22
 # define VLC_THREAD_PRIORITY_HIGHEST 22
 
+#elif defined(__native_client__)
+# include <unistd.h> /* _POSIX_SPIN_LOCKS */
+# include <pthread.h>
+# include <semaphore.h>
+# include <poll.h>
+
+/**
+ * Thread handle.
+ */
+typedef struct vlc_thread* vlc_thread_t;
+
+/**
+ * Return value of a canceled thread.
+ */
+#define VLC_THREAD_CANCELED NULL
+
+/**
+ * Mutex.
+ *
+ * Storage space for a mutual exclusion lock.
+ */
+typedef pthread_mutex_t vlc_mutex_t;
+
+/**
+ * Static initializer for (static) mutex.
+ */
+#define VLC_STATIC_MUTEX PTHREAD_MUTEX_INITIALIZER
+
+/**
+ * Condition variable.
+ *
+ * Storage space for a thread condition variable.
+ */
+typedef pthread_cond_t  vlc_cond_t;
+
+/**
+ * Static initializer for (static) condition variable.
+ */
+#define VLC_STATIC_COND  PTHREAD_COND_INITIALIZER
+
+/**
+ * Semaphore.
+ *
+ * Storage space for a thread-safe semaphore.
+ */
+typedef sem_t           vlc_sem_t;
+
+/**
+ * Read/write lock.
+ *
+ * Storage space for a slim reader/writer lock.
+ */
+typedef pthread_rwlock_t vlc_rwlock_t;
+
+/**
+ * Static initializer for (static) read/write lock.
+ */
+#define VLC_STATIC_RWLOCK PTHREAD_RWLOCK_INITIALIZER
+
+/**
+ * Thread-local key handle.
+ */
+typedef pthread_key_t   vlc_threadvar_t;
+
+/**
+ * Threaded timer handle.
+ */
+typedef struct vlc_timer *vlc_timer_t;
+
+# define VLC_THREAD_PRIORITY_LOW      0
+# define VLC_THREAD_PRIORITY_INPUT   10
+# define VLC_THREAD_PRIORITY_AUDIO    5
+# define VLC_THREAD_PRIORITY_VIDEO    0
+# define VLC_THREAD_PRIORITY_OUTPUT  15
+# define VLC_THREAD_PRIORITY_HIGHEST 20
+
+static inline int vlc_poll (struct pollfd *fds, unsigned nfds, int timeout)
+{
+    int val;
+
+    do
+    {
+        int ugly_timeout = ((unsigned)timeout >= 50) ? 50 : timeout;
+        if (timeout >= 0)
+            timeout -= ugly_timeout;
+
+        vlc_testcancel ();
+        val = poll (fds, nfds, ugly_timeout);
+    }
+    while (val == 0 && timeout != 0);
+
+    return val;
+}
+
+# define poll(u,n,t) vlc_poll(u, n, t)
+
 #else /* POSIX threads */
 # include <unistd.h> /* _POSIX_SPIN_LOCKS */
 # include <pthread.h>
diff --git a/src/Makefile.am b/src/Makefile.am
index 5ee185f..439de17 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -211,6 +211,7 @@ EXTRA_libvlccore_la_SOURCES = \
 	$(SOURCES_libvlc_linux) \
 	$(SOURCES_libvlc_win32) \
 	$(SOURCES_libvlc_os2) \
+	$(SOURCES_libvlc_nacl) \
 	$(SOURCES_libvlc_other) \
 	$(SOURCES_libvlc_httpd) \
 	$(SOURCES_libvlc_sout) \
@@ -231,12 +232,16 @@ else
 if HAVE_OS2
 libvlccore_la_SOURCES += $(SOURCES_libvlc_os2)
 else
+if HAVE_NACL
+libvlccore_la_SOURCES += $(SOURCES_libvlc_nacl)
+else
 libvlccore_la_SOURCES += $(SOURCES_libvlc_other)
 endif
 endif
 endif
 endif
 endif
+endif
 if BUILD_HTTPD
 libvlccore_la_SOURCES += $(SOURCES_libvlc_httpd)
 endif
@@ -311,6 +316,25 @@ SOURCES_libvlc_os2 = \
 	os2/rand.c \
 	$(NULL)
 
+SOURCES_libvlc_nacl = \
+	posix/dirs.c \
+	nacl/cancel.c \
+	nacl/mutex.c \
+	nacl/plugin.c \
+	nacl/rwlock.c \
+	nacl/sem.c \
+	nacl/thread.c \
+	nacl/threadvar.c \
+	nacl/time.c \
+	posix/error.c \
+	posix/filesystem.c \
+	android/netconf.c \
+	posix/timer.c \
+	posix/linux_cpu.c \
+	posix/linux_specific.c \
+	posix/rand.c \
+	$(NULL)
+
 SOURCES_libvlc_other = \
 	posix/dirs.c \
 	posix/error.c \
diff --git a/src/nacl/cancel.c b/src/nacl/cancel.c
new file mode 100644
index 0000000..03f0a3f
--- /dev/null
+++ b/src/nacl/cancel.c
@@ -0,0 +1,102 @@
+/*****************************************************************************
+ * cancel.c : pthread cancel.
+ *****************************************************************************
+ * Copyright (C) 1999-2016 VLC authors and VideoLAN
+ *
+ * Authors: Jean-Marc Dressler <polux@via.ecp.fr>
+ *          Samuel Hocevar <sam@zoy.org>
+ *          Gildas Bazin <gbazin@netcourrier.com>
+ *          Clément Sténac
+ *          Rémi Denis-Courmont
+ *          Pierre Ynard
+ *          Richard Diamond
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include "thread.h"
+
+// cancellation:
+
+void vlc_cancel(vlc_thread_t id) {
+  atomic_store(&id->killed, true);
+
+  vlc_mutex_lock(&id->waiting_lock);
+  if(id->waiting) {
+    pthread_cond_broadcast(id->waiting);
+  }
+  vlc_mutex_unlock(&id->waiting_lock);
+}
+
+int vlc_savecancel(void) {
+  struct vlc_thread *t = __local_thread;
+  if (t == NULL)
+    return false; // external thread
+
+  int state = t->killable;
+  t->killable = false;
+  return state;
+}
+
+void vlc_restorecancel(int state) {
+  struct vlc_thread *t = __local_thread;
+  assert(state == false || state == true);
+
+  if (t == NULL)
+    return; // external
+
+  assert(!t->killable);
+  t->killable = state != 0;
+}
+
+void vlc_testcancel(void) {
+  struct vlc_thread* local = __local_thread;
+  if(!local) {
+    return;
+  }
+  if(!local->killable) {
+    return;
+  }
+  if(!atomic_load(&local->killed)) {
+    return;
+  }
+
+  pthread_exit(NULL);
+}
+
+void vlc_control_cancel(int cmd, ...) {
+  va_list ap;
+
+  struct vlc_thread *t = __local_thread;
+  if(t == NULL)
+    return; // external
+
+  va_start(ap, cmd);
+  switch (cmd) {
+  case VLC_CLEANUP_PUSH: {
+    vlc_cleanup_t *cleaner = va_arg(ap, vlc_cleanup_t*);
+    cleaner->next = t->cleaners;
+    t->cleaners = cleaner;
+    break;
+  }
+
+  case VLC_CLEANUP_POP: {
+    assert(t->cleaners);
+    t->cleaners = t->cleaners->next;
+    break;
+  }
+  }
+  va_end (ap);
+}
diff --git a/src/nacl/cond.c b/src/nacl/cond.c
new file mode 100644
index 0000000..c6ffc49
--- /dev/null
+++ b/src/nacl/cond.c
@@ -0,0 +1,137 @@
+/*****************************************************************************
+ * cond.c : pthread condition variable.
+ *****************************************************************************
+ * Copyright (C) 1999-2016 VLC authors and VideoLAN
+ *
+ * Authors: Jean-Marc Dressler <polux@via.ecp.fr>
+ *          Samuel Hocevar <sam@zoy.org>
+ *          Gildas Bazin <gbazin@netcourrier.com>
+ *          Clément Sténac
+ *          Rémi Denis-Courmont
+ *          Pierre Ynard
+ *          Richard Diamond
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include "thread.h"
+
+void vlc_cond_init(vlc_cond_t* condvar) {
+  pthread_condattr_t attr;
+
+  pthread_condattr_init(&attr);
+  pthread_condattr_setclock(&attr, CLOCK_MONOTONIC);
+
+  int val = pthread_cond_init(condvar, &attr);
+  VLC_THREAD_ASSERT("condition variable init");
+}
+
+void vlc_cond_init_daytime(vlc_cond_t* condvar) {
+  pthread_condattr_t attr;
+
+  pthread_condattr_init(&attr);
+  pthread_condattr_setclock(&attr, CLOCK_REALTIME);
+
+  int val = pthread_cond_init(condvar, &attr);
+  VLC_THREAD_ASSERT("condition variable init");
+}
+
+void vlc_cond_destroy(vlc_cond_t* condvar) {
+  int val = pthread_cond_destroy(condvar);
+  VLC_THREAD_ASSERT("destroying condition");
+}
+
+void vlc_cond_signal(vlc_cond_t* condvar) {
+  int val = pthread_cond_signal(condvar);
+  VLC_THREAD_ASSERT("signaling condition variable");
+}
+
+void vlc_cond_broadcast(vlc_cond_t* condvar) {
+  pthread_cond_broadcast(condvar);
+}
+
+void vlc_cond_wait(vlc_cond_t* condvar, vlc_mutex_t* mutex) {
+  struct vlc_thread* t = __local_thread;
+
+  if(t != NULL) {
+    vlc_testcancel();
+    if (vlc_mutex_trylock(&t->waiting_lock) == 0) {
+      t->waiting = condvar;
+      vlc_mutex_unlock(&t->waiting_lock);
+    } else {
+      vlc_testcancel();
+      t = NULL;
+    }
+  }
+
+  int val = pthread_cond_wait(condvar, mutex);
+  VLC_THREAD_ASSERT("waiting on condition");
+
+  if(t != NULL){
+    vlc_mutex_lock(&t->waiting_lock);
+    t->waiting = NULL;
+    vlc_mutex_unlock(&t->waiting_lock);
+    vlc_testcancel();
+  }
+}
+
+int vlc_cond_timedwait(vlc_cond_t* condvar, vlc_mutex_t* mutex, mtime_t deadline) {
+  clock_setup();
+  /* If the deadline is already elapsed, or within the clock precision,
+   * do not even bother the system timer. */
+  deadline -= vlc_clock_prec;
+  deadline -= mdate();
+
+  /* deadline is now relative */
+
+  if(deadline < 0) {
+    return ETIMEDOUT;
+  }
+
+  /* Create an absolute time from deadline and CLOCK_REALTIME */
+  struct timespec rt;
+  if(unlikely(clock_gettime(CLOCK_REALTIME, &rt) != 0))
+    abort();
+
+  deadline += (INT64_C(1000000) * rt.tv_sec) + (rt.tv_nsec / 1000);
+
+  struct timespec ts = mtime_to_ts(deadline);
+
+  struct vlc_thread* t = __local_thread;
+
+  if(t != NULL) {
+    vlc_testcancel();
+    if(vlc_mutex_trylock(&t->waiting_lock) == 0) {
+      t->waiting = condvar;
+      vlc_mutex_unlock(&t->waiting_lock);
+    } else {
+      vlc_testcancel();
+      t = NULL;
+    }
+  }
+
+  int val = pthread_cond_timedwait_abs(condvar, mutex, &ts);
+
+  if(val != ETIMEDOUT)
+    VLC_THREAD_ASSERT ("timed-waiting on condition");
+
+  if(t != NULL) {
+    vlc_mutex_lock(&t->waiting_lock);
+    t->waiting = NULL;
+    vlc_mutex_unlock(&t->waiting_lock);
+    vlc_testcancel();
+  }
+  return val;
+}
diff --git a/src/nacl/mutex.c b/src/nacl/mutex.c
new file mode 100644
index 0000000..008ba93
--- /dev/null
+++ b/src/nacl/mutex.c
@@ -0,0 +1,88 @@
+/*****************************************************************************
+ * mutex.c : pthread mutexes
+ *****************************************************************************
+ * Copyright (C) 1999-2016 VLC authors and VideoLAN
+ *
+ * Authors: Jean-Marc Dressler <polux@via.ecp.fr>
+ *          Samuel Hocevar <sam@zoy.org>
+ *          Gildas Bazin <gbazin@netcourrier.com>
+ *          Clément Sténac
+ *          Rémi Denis-Courmont
+ *          Pierre Ynard
+ *          Richard Diamond
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include "thread.h"
+
+void vlc_mutex_init(vlc_mutex_t* mutex) {
+    pthread_mutexattr_t attr;
+
+    int val;
+    val = pthread_mutexattr_init(&attr);
+    VLC_THREAD_ASSERT("mutex attribute init");
+#ifdef NDEBUG
+    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_DEFAULT);
+#else
+    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ERRORCHECK);
+#endif
+    val = pthread_mutex_init(mutex, &attr);
+    VLC_THREAD_ASSERT("mutex init");
+    pthread_mutexattr_destroy(&attr);
+}
+
+void vlc_mutex_init_recursive(vlc_mutex_t* mutex) {
+    pthread_mutexattr_t attr;
+
+    int val;
+    val = pthread_mutexattr_init(&attr);
+    VLC_THREAD_ASSERT("mutex attribute init");
+
+    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
+#ifdef NDEBUG
+    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_DEFAULT);
+#else
+    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ERRORCHECK);
+#endif
+
+    val = pthread_mutex_init(mutex, &attr);
+    VLC_THREAD_ASSERT("mutex init");
+
+    pthread_mutexattr_destroy(&attr);
+}
+
+void vlc_mutex_destroy(vlc_mutex_t* mutex) {
+  int val = pthread_mutex_destroy(mutex);
+  VLC_THREAD_ASSERT("destroying mutex");
+}
+
+void vlc_mutex_lock(vlc_mutex_t* mutex) {
+  int val = pthread_mutex_lock(mutex);
+  VLC_THREAD_ASSERT ("locking mutex");
+}
+
+int vlc_mutex_trylock(vlc_mutex_t* mutex) {
+  int val = pthread_mutex_trylock(mutex);
+
+  if(val != EBUSY)
+    VLC_THREAD_ASSERT("locking mutex");
+  return val;
+}
+
+void vlc_mutex_unlock(vlc_mutex_t* mutex) {
+  int val = pthread_mutex_unlock(mutex);
+  VLC_THREAD_ASSERT("unlocking mutex");
+}
diff --git a/src/nacl/rwlock.c b/src/nacl/rwlock.c
new file mode 100644
index 0000000..f7b9a3c
--- /dev/null
+++ b/src/nacl/rwlock.c
@@ -0,0 +1,54 @@
+/*****************************************************************************
+ * thread.c : pthread create.
+ *****************************************************************************
+ * Copyright (C) 1999-2016 VLC authors and VideoLAN
+ *
+ * Authors: Jean-Marc Dressler <polux@via.ecp.fr>
+ *          Samuel Hocevar <sam@zoy.org>
+ *          Gildas Bazin <gbazin@netcourrier.com>
+ *          Clément Sténac
+ *          Rémi Denis-Courmont
+ *          Pierre Ynard
+ *          Richard Diamond
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include "thread.h"
+
+void vlc_rwlock_init(vlc_rwlock_t* lock) {
+  const int val = pthread_rwlock_init(lock, NULL);
+  VLC_THREAD_ASSERT("initializing R/W lock");
+}
+
+void vlc_rwlock_destroy(vlc_rwlock_t* lock) {
+  const int val = pthread_rwlock_destroy(lock);
+  VLC_THREAD_ASSERT("destroying R/W lock");
+}
+
+void vlc_rwlock_rdlock(vlc_rwlock_t* lock) {
+  const int val = pthread_rwlock_rdlock(lock);
+  VLC_THREAD_ASSERT("acquiring R/W lock for reading");
+}
+
+void vlc_rwlock_wrlock(vlc_rwlock_t* lock) {
+  const int val = pthread_rwlock_wrlock(lock);
+  VLC_THREAD_ASSERT("acquiring R/W lock for writing");
+}
+
+void vlc_rwlock_unlock(vlc_rwlock_t* lock) {
+  const int val = pthread_rwlock_unlock(lock);
+  VLC_THREAD_ASSERT("releasing R/W lock");
+}
diff --git a/src/nacl/sem.c b/src/nacl/sem.c
new file mode 100644
index 0000000..c7a3c7c
--- /dev/null
+++ b/src/nacl/sem.c
@@ -0,0 +1,72 @@
+/*****************************************************************************
+ * sem.c : semaphores.
+ *****************************************************************************
+ * Copyright (C) 1999-2016 VLC authors and VideoLAN
+ *
+ * Authors: Jean-Marc Dressler <polux@via.ecp.fr>
+ *          Samuel Hocevar <sam@zoy.org>
+ *          Gildas Bazin <gbazin@netcourrier.com>
+ *          Clément Sténac
+ *          Rémi Denis-Courmont
+ *          Pierre Ynard
+ *          Richard Diamond
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include "thread.h"
+
+void vlc_sem_init(vlc_sem_t* sem, unsigned value) {
+  if(likely(sem_init(sem, 0, value) == 0)) {
+    return;
+  }
+
+  const int val = errno;
+  VLC_THREAD_ASSERT("destroying semaphore");
+}
+
+void vlc_sem_destroy(vlc_sem_t* sem) {
+  if(likely(sem_destroy(sem) == 0)) {
+    return;
+  }
+
+  const int val = errno;
+  VLC_THREAD_ASSERT("destroying semaphore");
+}
+
+int vlc_sem_post(vlc_sem_t* sem) {
+  if(likely(sem_post(sem) == 0)) {
+    return 0;
+  }
+
+  const int val = errno;
+
+  if(unlikely(val != EOVERFLOW)) {
+    VLC_THREAD_ASSERT("unlocking semaphore");
+  }
+  return val;
+}
+
+void vlc_sem_wait(vlc_sem_t* sem) {
+  int val = 0;
+
+  do {
+    if(likely(sem_wait(sem) == 0)) {
+      return;
+    }
+  } while ((val = errno) == EINTR);
+
+  VLC_THREAD_ASSERT("locking semaphore");
+}
diff --git a/src/nacl/thread.c b/src/nacl/thread.c
new file mode 100644
index 0000000..61d2349
--- /dev/null
+++ b/src/nacl/thread.c
@@ -0,0 +1,155 @@
+/*****************************************************************************
+ * thread.c : pthread create.
+ *****************************************************************************
+ * Copyright (C) 1999-2016 VLC authors and VideoLAN
+ *
+ * Authors: Jean-Marc Dressler <polux@via.ecp.fr>
+ *          Samuel Hocevar <sam@zoy.org>
+ *          Gildas Bazin <gbazin@netcourrier.com>
+ *          Clément Sténac
+ *          Rémi Denis-Courmont
+ *          Pierre Ynard
+ *          Richard Diamond
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include "thread.h"
+
+void vlc_threads_setup(libvlc_int_t* libvlc) {
+  VLC_UNUSED(libvlc);
+}
+
+// thread creation:
+
+static void detached_thread_cleanup(void* data) {
+  struct vlc_thread* thread = (struct vlc_thread*)data;
+  vlc_mutex_destroy(&thread->waiting_lock);
+  free(thread);
+}
+static void* detached_thread_entry(void* data) {
+  struct vlc_thread* t = (struct vlc_thread*)data;
+  __local_thread = t;
+
+  vlc_cleanup_push(detached_thread_cleanup, t);
+
+  // TODO: ignores errors.
+  pthread_setschedprio(t->id, t->schedprio);
+
+  t->entry(t->entry_data);
+  vlc_cleanup_pop();
+  detached_thread_cleanup(data);
+
+  return NULL;
+}
+static void joinable_thread_cleanup(void* data) {
+  struct vlc_thread* t = (struct vlc_thread*)data;
+  vlc_sem_post(&t->finished);
+}
+static void* joinable_thread_entry(void* data) {
+  struct vlc_thread* t = (struct vlc_thread*)data;
+  __local_thread = t;
+
+  void* ret = NULL;
+
+  vlc_cleanup_push(joinable_thread_cleanup, data);
+
+  // TODO: ignores errors.
+  pthread_setschedprio(t->id, t->schedprio);
+
+  ret = t->entry(t->entry_data);
+  vlc_cleanup_pop();
+  joinable_thread_cleanup(data);
+
+  return ret;
+}
+
+static int vlc_clone_attr(vlc_thread_t* id, void* (*entry)(void*),
+                          void* data, const bool detach,
+                          const int priority) {
+  struct vlc_thread* thread = (struct vlc_thread*)malloc(sizeof(struct vlc_thread));
+  if(unlikely(thread == NULL)) {
+    return ENOMEM;
+  }
+
+  if(!detach) {
+    vlc_sem_init(&thread->finished, 0);
+  }
+
+  atomic_store(&thread->killed, false);
+  thread->killable = true;
+  thread->waiting = NULL;
+  thread->entry = entry;
+  thread->entry_data = data;
+  thread->schedprio = priority;
+  thread->cleaners = NULL;
+  vlc_mutex_init(&thread->waiting_lock);
+
+  int detached_state;
+  if(detach) {
+    entry = detached_thread_entry;
+    detached_state = PTHREAD_CREATE_DETACHED;
+  } else {
+    entry = joinable_thread_entry;
+    detached_state = PTHREAD_CREATE_JOINABLE;
+  }
+
+  pthread_attr_t attr;
+  pthread_attr_init(&attr);
+  pthread_attr_setdetachstate(&attr, detached_state);
+
+  int ret = pthread_create(&thread->id, &attr, entry, (void*)thread);
+  pthread_attr_destroy(&attr);
+
+  if(!ret && id != NULL) {
+    *id = (struct vlc_thread*)thread;
+  }
+
+  if(ret) {
+    if(id != NULL) {
+      *id = NULL;
+    }
+    free(thread);
+  }
+  return ret;
+}
+int vlc_clone(vlc_thread_t* id, void* (*entry)(void*), void* data,
+              int priority) {
+  return vlc_clone_attr(id, entry, data, false, priority);
+}
+int vlc_clone_detach(vlc_thread_t* id, void* (*entry)(void*), void* data,
+                     int priority) {
+  return vlc_clone_attr(id, entry, data, true, priority);
+}
+void vlc_join(vlc_thread_t id, void** result) {
+  vlc_sem_wait(&id->finished);
+  vlc_sem_destroy(&id->finished);
+
+  int val = pthread_join(id->id, result);
+  VLC_THREAD_ASSERT("vlc_join");
+  vlc_mutex_destroy(&id->waiting_lock);
+  free(id);
+}
+int vlc_set_priority(vlc_thread_t id, int priority) {
+  if(pthread_setschedprio(id->id, priority)) {
+    return VLC_EGENERIC;
+  } else {
+    return VLC_SUCCESS;
+  }
+}
+
+unsigned vlc_GetCPUCount(void) {
+  return sysconf(_SC_NPROCESSORS_ONLN);
+}
diff --git a/src/nacl/thread.h b/src/nacl/thread.h
new file mode 100644
index 0000000..81d9c0e
--- /dev/null
+++ b/src/nacl/thread.h
@@ -0,0 +1,100 @@
+/*****************************************************************************
+ * thread.c : NaCl-specific back-end for pthreads
+ *****************************************************************************
+ * Copyright (C) 1999-2016 VLC authors and VideoLAN
+ *
+ * Authors: Jean-Marc Dressler <polux@via.ecp.fr>
+ *          Samuel Hocevar <sam@zoy.org>
+ *          Gildas Bazin <gbazin@netcourrier.com>
+ *          Clément Sténac
+ *          Rémi Denis-Courmont
+ *          Pierre Ynard
+ *          Richard Diamond
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_common.h>
+#include <vlc_threads.h>
+#include <vlc_atomic.h>
+
+#include "libvlc.h"
+#include <errno.h>
+#include <assert.h>
+
+/// Based off Android's emulation layer.
+
+struct vlc_thread {
+  pthread_t       id;
+  pthread_cond_t* waiting;
+  vlc_mutex_t     waiting_lock;
+  vlc_sem_t       finished;
+  int             schedprio;
+
+  void* (*entry)(void*);
+  void* entry_data;
+
+  atomic_bool killed;
+  bool killable;
+
+  vlc_cleanup_t* cleaners;
+};
+
+// Note: NaCl thread local reads call a function. So reads of the global should
+// be to a stack local variable.
+static __thread struct vlc_thread* __local_thread = NULL;
+
+#ifndef NDEBUG
+/**
+ * Reports a fatal error from the threading layer, for debugging purposes.
+ */
+static inline void vlc_thread_fatal(const char* action, const int error,
+                                    const char* function, const char* file,
+                                    const unsigned line) {
+  VLC_UNUSED(function); VLC_UNUSED(file); VLC_UNUSED(line);
+
+  int canc = vlc_savecancel();
+  fprintf(stderr, "LibVLC fatal error %s (%d) in thread %u ",
+          action, error, (uintptr_t)(pthread_self()));
+  perror("Thread error");
+  fflush(stderr);
+
+  vlc_restorecancel(canc);
+  abort();
+}
+
+# define VLC_THREAD_ASSERT(action) \
+    if(unlikely(val)) \
+        vlc_thread_fatal(action, val, __func__, __FILE__, __LINE__)
+#else
+# define VLC_THREAD_ASSERT(action) ((void)val)
+#endif
+
+static inline struct timespec mtime_to_ts(const mtime_t date) {
+  const lldiv_t d = lldiv(date, CLOCK_FREQ);
+  const struct timespec ts = { d.quot, d.rem * (1000000000 / CLOCK_FREQ) };
+
+  return ts;
+}
+
+extern unsigned vlc_clock_prec;
+void vlc_clock_setup_once(void);
+
+extern pthread_once_t vlc_clock_once;
+#define clock_setup() pthread_once(&vlc_clock_once, vlc_clock_setup_once)
diff --git a/src/nacl/threadvar.c b/src/nacl/threadvar.c
new file mode 100644
index 0000000..9024406
--- /dev/null
+++ b/src/nacl/threadvar.c
@@ -0,0 +1,45 @@
+/*****************************************************************************
+ * threadvar.c : pthread threadvars.
+ *****************************************************************************
+ * Copyright (C) 1999-2016 VLC authors and VideoLAN
+ *
+ * Authors: Jean-Marc Dressler <polux@via.ecp.fr>
+ *          Samuel Hocevar <sam@zoy.org>
+ *          Gildas Bazin <gbazin@netcourrier.com>
+ *          Clément Sténac
+ *          Rémi Denis-Courmont
+ *          Pierre Ynard
+ *          Richard Diamond
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include "thread.h"
+
+int vlc_threadvar_create(vlc_threadvar_t* key, void (*destr) (void*)) {
+  return pthread_key_create (key, destr);
+}
+
+void vlc_threadvar_delete (vlc_threadvar_t* tls) {
+  pthread_key_delete(*tls);
+}
+
+int vlc_threadvar_set(vlc_threadvar_t key, void* value) {
+  return pthread_setspecific(key, value);
+}
+
+void* vlc_threadvar_get(vlc_threadvar_t key) {
+  return pthread_getspecific(key);
+}
diff --git a/src/nacl/time.c b/src/nacl/time.c
new file mode 100644
index 0000000..caa25f5
--- /dev/null
+++ b/src/nacl/time.c
@@ -0,0 +1,91 @@
+/*****************************************************************************
+ * time.c : time releated functions for NaCl.
+ *****************************************************************************
+ * Copyright (C) 1999-2016 VLC authors and VideoLAN
+ *
+ * Authors: Jean-Marc Dressler <polux@via.ecp.fr>
+ *          Samuel Hocevar <sam@zoy.org>
+ *          Gildas Bazin <gbazin@netcourrier.com>
+ *          Clément Sténac
+ *          Rémi Denis-Courmont
+ *          Pierre Ynard
+ *          Richard Diamond
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include "thread.h"
+
+#include <time.h>
+
+unsigned vlc_clock_prec;
+pthread_once_t vlc_clock_once = PTHREAD_ONCE_INIT;
+void vlc_clock_setup_once(void) {
+  struct timespec res;
+  if(unlikely(clock_getres(CLOCK_MONOTONIC, &res) != 0 || res.tv_sec != 0))
+    abort();
+  vlc_clock_prec = (res.tv_nsec + 500) / 1000;
+}
+
+mtime_t mdate() {
+  struct timespec ts;
+
+  clock_setup();
+  if (unlikely(clock_gettime(CLOCK_MONOTONIC, &ts) != 0))
+    abort();
+
+  return (INT64_C(1000000) * ts.tv_sec) + (ts.tv_nsec / 1000);
+}
+
+#undef mwait
+void mwait(mtime_t deadline) {
+  clock_setup();
+  /* If the deadline is already elapsed, or within the clock precision,
+   * do not even bother the system timer. */
+  deadline -= vlc_clock_prec;
+
+  struct timespec ts = mtime_to_ts(deadline);
+
+  struct timespec now;
+  long int nsec;
+  long int sec;
+
+  /* Get the current time for this clock.  */
+  if(likely(clock_gettime(CLOCK_MONOTONIC, &now) != 0)) {
+    fprintf(stderr, "clock_gettime failed\n");
+    abort();
+  }
+
+
+  /* Compute the difference.  */
+  nsec = ts.tv_nsec - now.tv_nsec;
+  sec = ts.tv_sec - now.tv_sec - (nsec < 0);
+  if(sec < 0)
+    /* The time has already elapsed.  */
+    return;
+
+  now.tv_sec = sec;
+  now.tv_nsec = nsec + (nsec < 0 ? 1000000000 : 0);
+
+  while(nanosleep(&now, NULL) == EINTR);
+}
+
+#undef msleep
+void msleep(mtime_t delay) {
+    struct timespec ts = mtime_to_ts(delay);
+    while (nanosleep (&ts, &ts) == -1) {
+        assert (errno == EINTR);
+    }
+}
-- 
2.7.4

